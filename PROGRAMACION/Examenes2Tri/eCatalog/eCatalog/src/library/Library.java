package library;
import java.util.ArrayList;
import java.util.HashMap;
import library.exceptions.*;

/**
 * ImplementaciÃ³n de una biblioteca que gestiona una colecciÃ³n de libros.
 * Utiliza un catÃ¡logo para almacenar los libros y un HashMap para acceso rÃ¡pido por autor.
 */
/*El plan maestro (o cÃ³mo convertirte en el seÃ±or de los libros): 
 
1. Implementar `Library` usando tu flamante `Catalog<Book>` (Â¡ese 
que te costÃ³ tres noches de insomnio!). 
2. Debes implementar estos mÃ©todos explosivos (literalmente): 
 
â—‹  `addBook`: Si el ISBN ya existe â†’ Â¡BOOM! ðŸ’¥ 
(DuplicateBookException) Â¡Como cuando intentas registrarte en una web y te dicen 
que tu email ya existe! ðŸ˜¤ 
â—‹  `removeBook`: Si el ISBN no existe â†’ Â¡BOOM! ðŸ’¥ 
(BookNotFoundException)  Es como buscar las llaves que JURASTE que dejaste en la 
mesa... Â¡pero no estÃ¡n! ðŸ”‘ 
â—‹  `findByIsbn`: Si no encuentra el libro â†’ Â¡BOOM! ðŸ’¥ 
(BookNotFoundException) Similar a cuando buscas ese calcetÃ­n perdido... Â¡sabes 
que existe pero no aparece! ðŸ§¦  
Â¡MEGA PISTA! ðŸŒŸ Si tu cÃ³digo explota mÃ¡s que una fÃ¡brica de 
fuegos artificiales, vas por buen camino.  
Â¡Pero que explote con ESTILO y las excepciones correctas!  
 
1. ImplementaciÃ³n de Library (20 puntos): 
â—‹  addBook con gestiÃ³n de duplicados (7 puntos) 
â—‹  removeBook con validaciÃ³n (7 puntos) 
â—‹  findByIsbn con excepciones (6 puntos) 
2. Pruebas Fase3.java pasan correctamente (5 puntos) */
public class Library implements ILibrary {
    Catalog<Book> catalogo;

    public Library() {
        this.catalogo = new Catalog<>();
    }

    @Override
    public void addBook(Book book) throws DuplicateBookException {
        for (int i=0; i<catalogo.getAllItems().size(); i++) {
            if (catalogo.getAllItems().get(i)!=null && catalogo.getAllItems().get(i).equals(book)) {
                throw new DuplicateBookException(book.getIsbn());
            }
        }
        catalogo.addItem(book);
    }

    @Override
    public void removeBook(String isbn) throws BookNotFoundException {
        for (int i=0; i<catalogo.getAllItems().size(); i++) {
            if (catalogo.getAllItems().get(i)!=null && catalogo.getAllItems().get(i).getIsbn().equals(isbn)) {
                catalogo.removeItem(catalogo.getAllItems().get(i));
                return;
            }
        }
        throw new BookNotFoundException(isbn);
    }

    @Override
    public Book findByIsbn(String isbn) throws BookNotFoundException {
        for (int i=0; i<catalogo.getAllItems().size(); i++) {
            if (catalogo.getAllItems().get(i)!=null && catalogo.getAllItems().get(i).getIsbn().equals(isbn)) {
                return catalogo.getAllItems().get(i);
            }
        }
        throw new BookNotFoundException(isbn);
    }

    @Override
    public ArrayList<Book> findByAuthor(String author) {
        ArrayList<Book> libros = new ArrayList<>();
        for (int i=0; i<catalogo.getAllItems().size(); i++) {
            if (catalogo.getAllItems().get(i)!=null && catalogo.getAllItems().get(i).getAuthor().equals(author)) {
                libros.add(catalogo.getAllItems().get(i));
            }
        }
        return libros;
    }

    @Override
    public ArrayList<Book> findByYear(int year) {
        ArrayList<Book> libros = new ArrayList<>();
        for (int i=0; i<catalogo.getAllItems().size(); i++) {
            if (catalogo.getAllItems().get(i)!=null && catalogo.getAllItems().get(i).getPublicationYear()==year) {
                libros.add(catalogo.getAllItems().get(i));
            }
        }
        return libros;
    }

    @Override
    public ArrayList<Book> getAllBooks() {
        return catalogo.getAllItems();
    }

} 